Caterwaul code analysis module | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This module emulates Javascript code with an abstract set of assumptions, and refines those assumptions as it goes. The goal is to be able to determine what kinds of requirements a piece of
code has. For example, here's a function:

| function (x) {return x + y}

This function has a free variable y that has almost no information. We could plug in any value we wanted and it would still work. However, if we change the code to a function that invokes x
and y, that is, function (x) {return x() + y()}, we now know that y must be a function. We also know that x must be a function, so in the expression (function (x) {return x() + y()})(z) we can
infer that z is a function of some sort.

Forcing expressions.
We assume that the code you're analyzing is not supposed to throw errors out to its calling context. That's the basis for all of the variance within the abstract variables. As soon as we see a
toplevel error, we backtrack to the nearest variant point (defined as a conditional involving an abstract value). We then try to change the conditional to take the branch not involving an
error. Once a change is made it isn't ever un-made, so abstracts only increase in information (i.e. we don't re-guess things about them).

Forcing comes into play when we have an expression that directly implies something. For example, f() directly implies that f is a function. When we see f(), we need f to be a function, so we
immediately start assuming that. Similarly, when we see x.foo, we immediately know that x is neither null nor undefined.

  Function inference.
  Functions are inferred by invocation. So to 'repair' a broken expression of the form f(), where f is a variant, we make it into a function.

  Definedness inference.
  Anytime we see an expression of the form 'x.y' or 'x[y]', we can assume that x is not null or undefined.

  Boolean inference.
  This is where things actually get interesting. Most trivial assumptions have to do with providing suitable values for functions or objects/arrays, but there are cases where we need to change
  the outcome of a branch. For example, consider this code:

  | if (document.getElementById) {
      return document.getElementById('foo');
    } else {
      throw new Error("Your browser is horribly borked");
    }

  A casual trace might run like this:

  | 1. Assume document is non-null.
    2. document.getElementById arbitrarily is undefined for now.
    3. The boolean condition returns undefined, which is falsy; so take the 'else' branch.
    4. throw an error, which triggers a backtrack.

  The backtracking step then goes back to the 'if' conditional, which is the last point that we could have changed the outcome of the program. It's determined by an abstract quantity with
  variant properties, which means that we can change our assumptions about it. Now we assume that document.getElementById is truthy, since that's what it takes to switch the conditional. So we
  re-run the analysis:

  | 1. Assume that document is {getElementById: <truthy>}.
    2. The boolean condition is truthy, so take the 'then' branch.
    3. 'return' evaluates its argument.
    4. document.getElementById() fails. Since it's obvious why it fails, we can refine <truthy> into (function (<undecided>) {<undecided>}).

  At this point we have this framing code:

  | var document = {getElementById: function () {}};

  Aliasing.
  Aliasing is common for performance reasons. For example:

  | var foo = object.bar.foo;

  We handle this by taking the abstract value represented by object.bar.foo and storing that reference in foo. Abstracts are references that behave like normal JS values.

  Multi-stage backtracking.
  Sometimes you need to backtrack more than once. For example, suppose you have this code:

  | some_global.method();
    var element = document.getElementById('foo');
    if (element) {
      if (some_global) {
        throw new Error('Oops!');
      }
    }

  The innermost conditional is decided already due to the some_global.method() code at the top. (We don't consider the oddity that 'false' can be falsy and have methods. This may change if it
  turns out to be important.) When we hit the 'throw', we find that there are no variants in the immediately-preceding conditional and so we proceed to the one before that. We then find the
  abstract 'element' (it's aliased to an abstract returned by document.getElementById()) and make sure that it's falsy.
